{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50000, 10)\n"
     ]
    }
   ],
   "source": [
    "#Import dataset\n",
    "import pickle as p\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as plimg\n",
    "from PIL import Image\n",
    "def load_CIFAR_batch(filename):\n",
    "    \"\"\" load single batch of cifar \"\"\"\n",
    "    with open(filename, 'rb')as f:\n",
    "        datadict = p.load(f,encoding='latin1')\n",
    "        #print(datadict.keys())\n",
    "        X = datadict['data']\n",
    "        Y = datadict['labels']\n",
    "        X = X.reshape(10000, 3, 32, 32)\n",
    "        Y = np.array(Y)\n",
    "        return X, Y\n",
    "\n",
    "X1,Y1=load_CIFAR_batch('data_batch_1')\n",
    "X2,Y2=load_CIFAR_batch('data_batch_2')\n",
    "X3,Y3=load_CIFAR_batch('data_batch_3')\n",
    "X4,Y4=load_CIFAR_batch('data_batch_4')\n",
    "X5,Y5=load_CIFAR_batch('data_batch_5')\n",
    "X_test,Y_test=load_CIFAR_batch('test_batch')\n",
    "X=np.vstack((X1,X2,X3,X4,X5)).reshape(50000,3072)\n",
    "X=X/255\n",
    "Y=np.hstack((Y1,Y2,Y3,Y4,Y5)).reshape((50000,1))\n",
    "X_test=X_test/255\n",
    "X_test=X_test.reshape(10000,3072)\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "# convert the 10 classes to one hot encoding\n",
    "one_hot = OneHotEncoder()\n",
    "y_train = one_hot.fit_transform(Y.reshape(-1,1)).toarray()\n",
    "y_test = one_hot.fit_transform(Y_test.reshape(-1,1)).toarray()\n",
    "print(np.shape(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "100/100 [==============================] - 74s 745ms/step - loss: 2.3739 - accuracy: 0.2382 - val_loss: 1.8404 - val_accuracy: 0.3348\n",
      "Epoch 2/100\n",
      "100/100 [==============================] - 73s 733ms/step - loss: 1.7659 - accuracy: 0.3602 - val_loss: 1.6816 - val_accuracy: 0.3959\n",
      "Epoch 3/100\n",
      "100/100 [==============================] - 68s 683ms/step - loss: 1.6448 - accuracy: 0.4115 - val_loss: 1.6106 - val_accuracy: 0.4160\n",
      "Epoch 4/100\n",
      "100/100 [==============================] - 70s 696ms/step - loss: 1.5766 - accuracy: 0.4374 - val_loss: 1.5091 - val_accuracy: 0.4675\n",
      "Epoch 5/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 1.5133 - accuracy: 0.4617 - val_loss: 1.5256 - val_accuracy: 0.4557\n",
      "Epoch 6/100\n",
      "100/100 [==============================] - 70s 695ms/step - loss: 1.4653 - accuracy: 0.4762 - val_loss: 1.4724 - val_accuracy: 0.4751\n",
      "Epoch 7/100\n",
      "100/100 [==============================] - 72s 718ms/step - loss: 1.4293 - accuracy: 0.4879 - val_loss: 1.4635 - val_accuracy: 0.4783\n",
      "Epoch 8/100\n",
      "100/100 [==============================] - 69s 689ms/step - loss: 1.4092 - accuracy: 0.4984 - val_loss: 1.4498 - val_accuracy: 0.4821\n",
      "Epoch 9/100\n",
      "100/100 [==============================] - 71s 711ms/step - loss: 1.3674 - accuracy: 0.5114 - val_loss: 1.3924 - val_accuracy: 0.5050\n",
      "Epoch 10/100\n",
      "100/100 [==============================] - 68s 683ms/step - loss: 1.3340 - accuracy: 0.5233 - val_loss: 1.4514 - val_accuracy: 0.4907\n",
      "Epoch 11/100\n",
      "100/100 [==============================] - 67s 672ms/step - loss: 1.3044 - accuracy: 0.5337 - val_loss: 1.3585 - val_accuracy: 0.5166\n",
      "Epoch 12/100\n",
      "100/100 [==============================] - 68s 680ms/step - loss: 1.2596 - accuracy: 0.5502 - val_loss: 1.3626 - val_accuracy: 0.5162\n",
      "Epoch 13/100\n",
      "100/100 [==============================] - 69s 692ms/step - loss: 1.2517 - accuracy: 0.5529 - val_loss: 1.3523 - val_accuracy: 0.5224\n",
      "Epoch 14/100\n",
      "100/100 [==============================] - 69s 690ms/step - loss: 1.2082 - accuracy: 0.5695 - val_loss: 1.3351 - val_accuracy: 0.5254\n",
      "Epoch 15/100\n",
      "100/100 [==============================] - 68s 684ms/step - loss: 1.1845 - accuracy: 0.5782 - val_loss: 1.3371 - val_accuracy: 0.5275\n",
      "Epoch 16/100\n",
      "100/100 [==============================] - 70s 698ms/step - loss: 1.1504 - accuracy: 0.5906 - val_loss: 1.3330 - val_accuracy: 0.5341\n",
      "Epoch 17/100\n",
      "100/100 [==============================] - 68s 683ms/step - loss: 1.1164 - accuracy: 0.6001 - val_loss: 1.3279 - val_accuracy: 0.5303\n",
      "Epoch 18/100\n",
      "100/100 [==============================] - 72s 721ms/step - loss: 1.0869 - accuracy: 0.6126 - val_loss: 1.3337 - val_accuracy: 0.5376\n",
      "Epoch 19/100\n",
      "100/100 [==============================] - 71s 713ms/step - loss: 1.0412 - accuracy: 0.6275 - val_loss: 1.3449 - val_accuracy: 0.5316\n",
      "Epoch 20/100\n",
      "100/100 [==============================] - 70s 697ms/step - loss: 1.0252 - accuracy: 0.6336 - val_loss: 1.3398 - val_accuracy: 0.5380\n",
      "Epoch 21/100\n",
      "100/100 [==============================] - 71s 715ms/step - loss: 0.9741 - accuracy: 0.6525 - val_loss: 1.3516 - val_accuracy: 0.5355\n",
      "Epoch 22/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 0.9415 - accuracy: 0.6642 - val_loss: 1.3529 - val_accuracy: 0.5450\n",
      "Epoch 23/100\n",
      "100/100 [==============================] - 71s 714ms/step - loss: 0.8998 - accuracy: 0.6786 - val_loss: 1.3730 - val_accuracy: 0.5423\n",
      "Epoch 24/100\n",
      "100/100 [==============================] - 70s 701ms/step - loss: 0.8567 - accuracy: 0.6955 - val_loss: 1.3945 - val_accuracy: 0.5339\n",
      "Epoch 25/100\n",
      "100/100 [==============================] - 70s 696ms/step - loss: 0.8264 - accuracy: 0.7058 - val_loss: 1.4121 - val_accuracy: 0.5417\n",
      "Epoch 26/100\n",
      "100/100 [==============================] - 72s 719ms/step - loss: 0.7708 - accuracy: 0.7241 - val_loss: 1.4556 - val_accuracy: 0.5320\n",
      "Epoch 27/100\n",
      "100/100 [==============================] - 66s 660ms/step - loss: 0.7373 - accuracy: 0.7390 - val_loss: 1.5012 - val_accuracy: 0.5373\n",
      "Epoch 28/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 0.6841 - accuracy: 0.7583 - val_loss: 1.4877 - val_accuracy: 0.5435\n",
      "Epoch 29/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 0.6564 - accuracy: 0.7680 - val_loss: 1.5066 - val_accuracy: 0.5494\n",
      "Epoch 30/100\n",
      "100/100 [==============================] - 70s 702ms/step - loss: 0.5962 - accuracy: 0.7911 - val_loss: 1.6128 - val_accuracy: 0.5427\n",
      "Epoch 31/100\n",
      "100/100 [==============================] - 71s 707ms/step - loss: 0.5556 - accuracy: 0.8064 - val_loss: 1.6420 - val_accuracy: 0.5406\n",
      "Epoch 32/100\n",
      "100/100 [==============================] - 71s 705ms/step - loss: 0.5022 - accuracy: 0.8257 - val_loss: 1.7205 - val_accuracy: 0.5330\n",
      "Epoch 33/100\n",
      "100/100 [==============================] - 72s 716ms/step - loss: 0.4477 - accuracy: 0.8442 - val_loss: 1.7683 - val_accuracy: 0.5360\n",
      "Epoch 34/100\n",
      "100/100 [==============================] - 71s 708ms/step - loss: 0.4288 - accuracy: 0.8513 - val_loss: 1.8737 - val_accuracy: 0.5344\n",
      "Epoch 35/100\n",
      "100/100 [==============================] - 71s 712ms/step - loss: 0.4010 - accuracy: 0.8612 - val_loss: 1.9016 - val_accuracy: 0.5382\n",
      "Epoch 36/100\n",
      "100/100 [==============================] - 71s 705ms/step - loss: 0.3531 - accuracy: 0.8790 - val_loss: 1.9658 - val_accuracy: 0.5387\n",
      "Epoch 37/100\n",
      "100/100 [==============================] - 72s 724ms/step - loss: 0.2998 - accuracy: 0.8994 - val_loss: 2.0324 - val_accuracy: 0.5423\n",
      "Epoch 38/100\n",
      "100/100 [==============================] - 71s 706ms/step - loss: 0.2821 - accuracy: 0.9055 - val_loss: 2.1076 - val_accuracy: 0.5393\n",
      "Epoch 39/100\n",
      "100/100 [==============================] - 70s 705ms/step - loss: 0.2551 - accuracy: 0.9143 - val_loss: 2.2922 - val_accuracy: 0.5287\n",
      "Epoch 40/100\n",
      "100/100 [==============================] - 73s 734ms/step - loss: 0.2331 - accuracy: 0.9218 - val_loss: 2.3349 - val_accuracy: 0.5377\n",
      "Epoch 41/100\n",
      "100/100 [==============================] - 71s 707ms/step - loss: 0.2151 - accuracy: 0.9283 - val_loss: 2.3345 - val_accuracy: 0.5268\n",
      "Epoch 42/100\n",
      "100/100 [==============================] - 70s 696ms/step - loss: 0.1909 - accuracy: 0.9371 - val_loss: 2.3990 - val_accuracy: 0.5280\n",
      "Epoch 43/100\n",
      "100/100 [==============================] - 70s 700ms/step - loss: 0.1604 - accuracy: 0.9492 - val_loss: 2.5133 - val_accuracy: 0.5331\n",
      "Epoch 44/100\n",
      "100/100 [==============================] - 70s 704ms/step - loss: 0.1540 - accuracy: 0.9515 - val_loss: 2.6149 - val_accuracy: 0.5354\n",
      "Epoch 45/100\n",
      "100/100 [==============================] - 71s 713ms/step - loss: 0.1202 - accuracy: 0.9641 - val_loss: 2.8644 - val_accuracy: 0.5258\n",
      "Epoch 46/100\n",
      "100/100 [==============================] - 71s 709ms/step - loss: 0.1628 - accuracy: 0.9442 - val_loss: 2.7267 - val_accuracy: 0.5264\n",
      "Epoch 47/100\n",
      "100/100 [==============================] - 72s 716ms/step - loss: 0.1596 - accuracy: 0.9472 - val_loss: 2.7844 - val_accuracy: 0.5316\n",
      "Epoch 48/100\n",
      "100/100 [==============================] - 73s 728ms/step - loss: 0.1262 - accuracy: 0.9591 - val_loss: 2.8765 - val_accuracy: 0.5250\n",
      "Epoch 49/100\n",
      "100/100 [==============================] - 71s 713ms/step - loss: 0.1199 - accuracy: 0.9622 - val_loss: 2.8836 - val_accuracy: 0.5368\n",
      "Epoch 50/100\n",
      "100/100 [==============================] - 70s 701ms/step - loss: 0.0968 - accuracy: 0.9705 - val_loss: 3.0104 - val_accuracy: 0.5331\n",
      "Epoch 51/100\n",
      "100/100 [==============================] - 70s 695ms/step - loss: 0.0943 - accuracy: 0.9697 - val_loss: 3.1591 - val_accuracy: 0.5245\n",
      "Epoch 52/100\n",
      "100/100 [==============================] - 69s 692ms/step - loss: 0.0800 - accuracy: 0.9762 - val_loss: 3.2050 - val_accuracy: 0.5338\n",
      "Epoch 53/100\n",
      "100/100 [==============================] - 71s 706ms/step - loss: 0.0835 - accuracy: 0.9735 - val_loss: 3.3252 - val_accuracy: 0.5320\n",
      "Epoch 54/100\n",
      "100/100 [==============================] - 72s 718ms/step - loss: 0.0770 - accuracy: 0.9757 - val_loss: 3.2470 - val_accuracy: 0.5298\n",
      "Epoch 55/100\n",
      "100/100 [==============================] - 71s 706ms/step - loss: 0.0810 - accuracy: 0.9740 - val_loss: 3.2990 - val_accuracy: 0.5269\n",
      "Epoch 56/100\n",
      "100/100 [==============================] - 71s 705ms/step - loss: 0.1020 - accuracy: 0.9676 - val_loss: 3.3154 - val_accuracy: 0.5248\n",
      "Epoch 57/100\n",
      "100/100 [==============================] - 75s 755ms/step - loss: 0.1567 - accuracy: 0.9453 - val_loss: 3.4433 - val_accuracy: 0.5185\n",
      "Epoch 58/100\n",
      "100/100 [==============================] - 71s 715ms/step - loss: 0.1450 - accuracy: 0.9501 - val_loss: 3.4141 - val_accuracy: 0.5237\n",
      "Epoch 59/100\n",
      "100/100 [==============================] - 70s 702ms/step - loss: 0.1236 - accuracy: 0.9581 - val_loss: 3.3713 - val_accuracy: 0.5334\n",
      "Epoch 60/100\n",
      "100/100 [==============================] - 71s 709ms/step - loss: 0.0658 - accuracy: 0.9796 - val_loss: 3.4221 - val_accuracy: 0.5338\n",
      "Epoch 61/100\n",
      "100/100 [==============================] - 71s 711ms/step - loss: 0.0647 - accuracy: 0.9791 - val_loss: 3.6788 - val_accuracy: 0.5237\n",
      "Epoch 62/100\n",
      "100/100 [==============================] - 71s 713ms/step - loss: 0.0810 - accuracy: 0.9737 - val_loss: 3.5722 - val_accuracy: 0.5317\n",
      "Epoch 63/100\n",
      "100/100 [==============================] - 73s 725ms/step - loss: 0.0538 - accuracy: 0.9835 - val_loss: 3.6654 - val_accuracy: 0.5227\n",
      "Epoch 64/100\n",
      "100/100 [==============================] - 71s 711ms/step - loss: 0.0617 - accuracy: 0.9802 - val_loss: 3.7230 - val_accuracy: 0.5269\n",
      "Epoch 65/100\n",
      "100/100 [==============================] - 72s 720ms/step - loss: 0.0555 - accuracy: 0.9820 - val_loss: 3.7020 - val_accuracy: 0.5281\n",
      "Epoch 66/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 0.0511 - accuracy: 0.9843 - val_loss: 3.8451 - val_accuracy: 0.5277\n",
      "Epoch 67/100\n",
      "100/100 [==============================] - 75s 750ms/step - loss: 0.1029 - accuracy: 0.9646 - val_loss: 3.8244 - val_accuracy: 0.5155\n",
      "Epoch 68/100\n",
      "100/100 [==============================] - 75s 747ms/step - loss: 0.1681 - accuracy: 0.9437 - val_loss: 3.6262 - val_accuracy: 0.5243\n",
      "Epoch 69/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 0.1244 - accuracy: 0.9586 - val_loss: 3.7073 - val_accuracy: 0.5174\n",
      "Epoch 70/100\n",
      "100/100 [==============================] - 75s 750ms/step - loss: 0.0685 - accuracy: 0.9783 - val_loss: 3.7336 - val_accuracy: 0.5294\n",
      "Epoch 71/100\n",
      "100/100 [==============================] - 74s 738ms/step - loss: 0.0435 - accuracy: 0.9866 - val_loss: 3.9325 - val_accuracy: 0.5198\n",
      "Epoch 72/100\n",
      "100/100 [==============================] - 71s 709ms/step - loss: 0.0297 - accuracy: 0.9915 - val_loss: 3.9770 - val_accuracy: 0.5362\n",
      "Epoch 73/100\n",
      "100/100 [==============================] - 77s 766ms/step - loss: 0.0187 - accuracy: 0.9956 - val_loss: 4.0216 - val_accuracy: 0.5340\n",
      "Epoch 74/100\n",
      "100/100 [==============================] - 71s 706ms/step - loss: 0.0148 - accuracy: 0.9966 - val_loss: 4.1678 - val_accuracy: 0.5349\n",
      "Epoch 75/100\n",
      "100/100 [==============================] - 72s 718ms/step - loss: 0.0158 - accuracy: 0.9962 - val_loss: 4.2008 - val_accuracy: 0.5318\n",
      "Epoch 76/100\n",
      "100/100 [==============================] - 107s 1s/step - loss: 0.0169 - accuracy: 0.9955 - val_loss: 4.2191 - val_accuracy: 0.5279\n",
      "Epoch 77/100\n",
      "100/100 [==============================] - 71s 713ms/step - loss: 0.0795 - accuracy: 0.9753 - val_loss: 4.2951 - val_accuracy: 0.4993\n",
      "Epoch 78/100\n",
      "100/100 [==============================] - 69s 691ms/step - loss: 0.3510 - accuracy: 0.8934 - val_loss: 3.6191 - val_accuracy: 0.5090\n",
      "Epoch 79/100\n",
      "100/100 [==============================] - 70s 696ms/step - loss: 0.1180 - accuracy: 0.9607 - val_loss: 3.9542 - val_accuracy: 0.5206\n",
      "Epoch 80/100\n",
      "100/100 [==============================] - 69s 691ms/step - loss: 0.0584 - accuracy: 0.9810 - val_loss: 3.9797 - val_accuracy: 0.5237\n",
      "Epoch 81/100\n",
      "100/100 [==============================] - 68s 683ms/step - loss: 0.0347 - accuracy: 0.9897 - val_loss: 4.0871 - val_accuracy: 0.5297\n",
      "Epoch 82/100\n",
      "100/100 [==============================] - 71s 706ms/step - loss: 0.0553 - accuracy: 0.9819 - val_loss: 4.2455 - val_accuracy: 0.5224\n",
      "Epoch 83/100\n",
      "100/100 [==============================] - 69s 686ms/step - loss: 0.0421 - accuracy: 0.9868 - val_loss: 4.2097 - val_accuracy: 0.5210\n",
      "Epoch 84/100\n",
      "100/100 [==============================] - 70s 697ms/step - loss: 0.0522 - accuracy: 0.9835 - val_loss: 4.2044 - val_accuracy: 0.5263\n",
      "Epoch 85/100\n",
      "100/100 [==============================] - 71s 711ms/step - loss: 0.0868 - accuracy: 0.9718 - val_loss: 4.2683 - val_accuracy: 0.5125\n",
      "Epoch 86/100\n",
      "100/100 [==============================] - 69s 695ms/step - loss: 0.1110 - accuracy: 0.9616 - val_loss: 4.4910 - val_accuracy: 0.5057\n",
      "Epoch 87/100\n",
      "100/100 [==============================] - 70s 700ms/step - loss: 0.1366 - accuracy: 0.9556 - val_loss: 4.1385 - val_accuracy: 0.5084\n",
      "Epoch 88/100\n",
      "100/100 [==============================] - 69s 692ms/step - loss: 0.1004 - accuracy: 0.9665 - val_loss: 4.2032 - val_accuracy: 0.5192\n",
      "Epoch 89/100\n",
      "100/100 [==============================] - 70s 696ms/step - loss: 0.0530 - accuracy: 0.9824 - val_loss: 4.3008 - val_accuracy: 0.5286\n",
      "Epoch 90/100\n",
      "100/100 [==============================] - 75s 751ms/step - loss: 0.0224 - accuracy: 0.9933 - val_loss: 4.3208 - val_accuracy: 0.5351\n",
      "Epoch 91/100\n",
      "100/100 [==============================] - 70s 704ms/step - loss: 0.0070 - accuracy: 0.9986 - val_loss: 4.3964 - val_accuracy: 0.5377\n",
      "Epoch 92/100\n",
      "100/100 [==============================] - 68s 676ms/step - loss: 0.0027 - accuracy: 0.9997 - val_loss: 4.3708 - val_accuracy: 0.5445\n",
      "Epoch 93/100\n",
      "100/100 [==============================] - 73s 732ms/step - loss: 0.0012 - accuracy: 0.9999 - val_loss: 4.4341 - val_accuracy: 0.5450\n",
      "Epoch 94/100\n",
      "100/100 [==============================] - 71s 709ms/step - loss: 7.9195e-04 - accuracy: 0.9999 - val_loss: 4.4721 - val_accuracy: 0.5449\n",
      "Epoch 95/100\n",
      "100/100 [==============================] - 70s 703ms/step - loss: 5.6097e-04 - accuracy: 1.0000 - val_loss: 4.5004 - val_accuracy: 0.5464\n",
      "Epoch 96/100\n",
      "100/100 [==============================] - 71s 714ms/step - loss: 4.7787e-04 - accuracy: 1.0000 - val_loss: 4.5386 - val_accuracy: 0.5472\n",
      "Epoch 97/100\n",
      "100/100 [==============================] - 70s 703ms/step - loss: 5.9013e-04 - accuracy: 1.0000 - val_loss: 4.5611 - val_accuracy: 0.5455\n",
      "Epoch 98/100\n",
      "100/100 [==============================] - 72s 716ms/step - loss: 5.5961e-04 - accuracy: 1.0000 - val_loss: 4.5639 - val_accuracy: 0.5426\n",
      "Epoch 99/100\n",
      "100/100 [==============================] - 71s 710ms/step - loss: 7.9942e-04 - accuracy: 0.9999 - val_loss: 4.5916 - val_accuracy: 0.5475\n",
      "Epoch 100/100\n",
      "100/100 [==============================] - 70s 700ms/step - loss: 0.0011 - accuracy: 0.9999 - val_loss: 4.6211 - val_accuracy: 0.5474\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "\n",
    "network_model = Sequential()\n",
    "network_model.add(Dense(3000, activation='relu'))\n",
    "network_model.add(Dense(2000,activation='relu'))\n",
    "network_model.add(Dense(1000,activation='relu'))\n",
    "network_model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "network_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "history=network_model.fit(X,y_train,batch_size=500,epochs=100,validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5000\n",
      "           1       1.00      1.00      1.00      5000\n",
      "           2       1.00      1.00      1.00      5000\n",
      "           3       1.00      1.00      1.00      5000\n",
      "           4       1.00      1.00      1.00      5000\n",
      "           5       1.00      1.00      1.00      5000\n",
      "           6       1.00      1.00      1.00      5000\n",
      "           7       1.00      1.00      1.00      5000\n",
      "           8       1.00      1.00      1.00      5000\n",
      "           9       1.00      1.00      1.00      5000\n",
      "\n",
      "    accuracy                           1.00     50000\n",
      "   macro avg       1.00      1.00      1.00     50000\n",
      "weighted avg       1.00      1.00      1.00     50000\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      0.63      0.63      1000\n",
      "           1       0.65      0.66      0.65      1000\n",
      "           2       0.44      0.44      0.44      1000\n",
      "           3       0.37      0.38      0.38      1000\n",
      "           4       0.46      0.44      0.45      1000\n",
      "           5       0.44      0.44      0.44      1000\n",
      "           6       0.60      0.61      0.60      1000\n",
      "           7       0.61      0.62      0.62      1000\n",
      "           8       0.65      0.68      0.67      1000\n",
      "           9       0.61      0.58      0.59      1000\n",
      "\n",
      "    accuracy                           0.55     10000\n",
      "   macro avg       0.55      0.55      0.55     10000\n",
      "weighted avg       0.55      0.55      0.55     10000\n",
      "\n",
      "test error rate: 0.4526\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "# compute the accuracy and print a classification report\n",
    "label_tra=network_model.predict(X)\n",
    "label_test=network_model.predict(X_test)\n",
    "label_name=['0','1','2','3','4','5','6','7','8','9']\n",
    "\n",
    "pred_tra,pred_test=np.zeros(50000),np.zeros(10000)\n",
    "for i in range(50000):\n",
    "    pred_tra[i]=np.argmax(label_tra[i])\n",
    "for j in range(10000):\n",
    "    pred_test[j]=np.argmax(label_test[j])\n",
    "print(classification_report(Y, pred_tra, target_names=label_name))\n",
    "print(classification_report(Y_test, pred_test, target_names=label_name))\n",
    "print('test error rate:',np.mean(pred_test!=Y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot training and test accuracy values\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()\n",
    "\n",
    "#plot training and test loss values\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
